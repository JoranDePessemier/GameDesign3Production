//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""aba76f29-d6c6-48c4-a181-def3dbd756c1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""cd4087e5-c2b1-4813-9fec-12d5e4768a52"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""d6930c85-0a21-4548-95f9-d186087694c1"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpPressed"",
                    ""type"": ""Button"",
                    ""id"": ""9dccf939-f926-4d92-81d8-66a872a90dec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TongueHolding"",
                    ""type"": ""Button"",
                    ""id"": ""eb01cd47-f777-48d1-b530-926216f952bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TonguePressed"",
                    ""type"": ""Button"",
                    ""id"": ""4c1a46df-d2df-4ab1-ba1e-92894c4feae6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TongueReleased"",
                    ""type"": ""Button"",
                    ""id"": ""31526efa-e607-4e46-963a-b4805e2d25a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpHolding"",
                    ""type"": ""Button"",
                    ""id"": ""7ff1de3b-8758-4793-8a41-84a6baa27dc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fbbfed9a-277c-4dde-874f-baaec3727959"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""132a1871-4e30-4b66-bd04-b44a8af570f3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f97de342-39d5-47d7-9b2d-0ab450ef3cfd"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef274872-31a7-4e4a-a9cf-253580893fc3"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TongueHolding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7faacae7-1591-485d-bcbe-1e9f9c3a4e00"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TonguePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3eeb20a-87d9-4409-816b-774136e5666b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TongueReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cda57c23-4f1f-4c59-86ea-9451273781e2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpHolding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_Movement = m_PlayerControls.FindAction("Movement", throwIfNotFound: true);
        m_PlayerControls_CameraMovement = m_PlayerControls.FindAction("CameraMovement", throwIfNotFound: true);
        m_PlayerControls_JumpPressed = m_PlayerControls.FindAction("JumpPressed", throwIfNotFound: true);
        m_PlayerControls_TongueHolding = m_PlayerControls.FindAction("TongueHolding", throwIfNotFound: true);
        m_PlayerControls_TonguePressed = m_PlayerControls.FindAction("TonguePressed", throwIfNotFound: true);
        m_PlayerControls_TongueReleased = m_PlayerControls.FindAction("TongueReleased", throwIfNotFound: true);
        m_PlayerControls_JumpHolding = m_PlayerControls.FindAction("JumpHolding", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_Movement;
    private readonly InputAction m_PlayerControls_CameraMovement;
    private readonly InputAction m_PlayerControls_JumpPressed;
    private readonly InputAction m_PlayerControls_TongueHolding;
    private readonly InputAction m_PlayerControls_TonguePressed;
    private readonly InputAction m_PlayerControls_TongueReleased;
    private readonly InputAction m_PlayerControls_JumpHolding;
    public struct PlayerControlsActions
    {
        private @Controls m_Wrapper;
        public PlayerControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerControls_Movement;
        public InputAction @CameraMovement => m_Wrapper.m_PlayerControls_CameraMovement;
        public InputAction @JumpPressed => m_Wrapper.m_PlayerControls_JumpPressed;
        public InputAction @TongueHolding => m_Wrapper.m_PlayerControls_TongueHolding;
        public InputAction @TonguePressed => m_Wrapper.m_PlayerControls_TonguePressed;
        public InputAction @TongueReleased => m_Wrapper.m_PlayerControls_TongueReleased;
        public InputAction @JumpHolding => m_Wrapper.m_PlayerControls_JumpHolding;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovement;
                @CameraMovement.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnCameraMovement;
                @CameraMovement.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnCameraMovement;
                @JumpPressed.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJumpPressed;
                @JumpPressed.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJumpPressed;
                @JumpPressed.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJumpPressed;
                @TongueHolding.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTongueHolding;
                @TongueHolding.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTongueHolding;
                @TongueHolding.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTongueHolding;
                @TonguePressed.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTonguePressed;
                @TonguePressed.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTonguePressed;
                @TonguePressed.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTonguePressed;
                @TongueReleased.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTongueReleased;
                @TongueReleased.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTongueReleased;
                @TongueReleased.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnTongueReleased;
                @JumpHolding.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJumpHolding;
                @JumpHolding.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJumpHolding;
                @JumpHolding.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnJumpHolding;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @CameraMovement.started += instance.OnCameraMovement;
                @CameraMovement.performed += instance.OnCameraMovement;
                @CameraMovement.canceled += instance.OnCameraMovement;
                @JumpPressed.started += instance.OnJumpPressed;
                @JumpPressed.performed += instance.OnJumpPressed;
                @JumpPressed.canceled += instance.OnJumpPressed;
                @TongueHolding.started += instance.OnTongueHolding;
                @TongueHolding.performed += instance.OnTongueHolding;
                @TongueHolding.canceled += instance.OnTongueHolding;
                @TonguePressed.started += instance.OnTonguePressed;
                @TonguePressed.performed += instance.OnTonguePressed;
                @TonguePressed.canceled += instance.OnTonguePressed;
                @TongueReleased.started += instance.OnTongueReleased;
                @TongueReleased.performed += instance.OnTongueReleased;
                @TongueReleased.canceled += instance.OnTongueReleased;
                @JumpHolding.started += instance.OnJumpHolding;
                @JumpHolding.performed += instance.OnJumpHolding;
                @JumpHolding.canceled += instance.OnJumpHolding;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnJumpPressed(InputAction.CallbackContext context);
        void OnTongueHolding(InputAction.CallbackContext context);
        void OnTonguePressed(InputAction.CallbackContext context);
        void OnTongueReleased(InputAction.CallbackContext context);
        void OnJumpHolding(InputAction.CallbackContext context);
    }
}
